generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  USER
}

enum Gender {
  HOMBRE
  MUJER
  UNISEX
  BEBÉ
  NIÑO
  NIÑA
}

model User {
  id          String   @id @default(uuid())
  name        String
  lastName    String
  address     String 
  phone       String
  email       String @unique
  password    String
  profileImg  String?
  role        Role       @default(USER)
  profile     Profile?
  carts       Cart[]    @relation("UserCarts")
  purchases   Purchase[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Cart {
  id         String      @id @default(uuid())
  userId     String      
  status     String      // 'pending', 'completed', 'cancelled'
  total      Float
  isDeleted  Boolean     @default(false)
  notifiedAt DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation("UserCarts", fields: [userId], references: [id])
  cartLines  CartLine[]
  sale       Sale?

  @@index([userId, isDeleted, status])
}

model CartLine {
  id        String   @id @default(uuid())
  quantity  Int
  subtotal  Float
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Sale {
  id        String   @id @default(uuid())
  date      DateTime
  cartId    String   @unique
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Purchase {
  id            String         @id @default(uuid())
  total         Float
  invoiceUrl    String?
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  purchaseLines PurchaseLine[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isDeleted     Boolean        @default(false)
  supplier      Supplier       @relation(fields: [supplierId], references: [id])
  supplierId    String
}

model PurchaseLine {
  id         String   @id @default(uuid())
  quantity   Int
  subtotal   Float
  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)
}

model Product {
  id            String            @id @default(uuid())
  name          String
  price         Float
  stock         Int
  images        ProductImage[]
  cartLines     CartLine[]
  purchaseLines PurchaseLine[]
  categories    CategoryProduct[]
  brand         Brand             @relation(fields: [brandId], references: [id])
  brandId       String
  gender        Gender
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  isDeleted     Boolean           @default(false)
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Category {
  id        String             @id @default(uuid())
  name      String
  products  CategoryProduct[]
  suppliers CategorySupplier[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  isDeleted Boolean            @default(false)
}

model Supplier {
  id         String             @id @default(uuid())
  name       String
  phone      String
  email      String             @unique
  taxId      String             @unique
  categories CategorySupplier[]
  purchases  Purchase[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  isDeleted  Boolean            @default(false)
}

model CategorySupplier {
  categoryId String
  supplierId String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@id([categoryId, supplierId])
}

model Report {
  id        String   @id @default(uuid())
  reportUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model CategoryProduct {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  @@unique([productId, categoryId])
}
